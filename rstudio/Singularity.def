Bootstrap: docker
From: debian:12.4
%runscript
  exec launch_rserver "${@}"

%apprun R
  exec R "${@}"

%apprun Rscript
  exec Rscript "${@}"

%apprun default
  exec "${@}"

%environment
  export PATH=/usr/lib/rstudio-server/bin:${PATH}

# During the build process, commands in the %setup section are first executed
# on the host system outside of the container after the base OS has been
# installed. You can reference the container file system with the
# $SINGULARITY_ROOTFS environment variable in the %setup section.
%setup

  # Copy files (often executable) to a system location like `/usr/local/bin`,
  # give them the appropriate permissions/ownership.
  #
  # install path/to/source_file1 path/to/source_file2 ... path/to/destination
  #
  # -D     create all leading components of DEST except the last, or all
  #        components of --target-directory, then copy SOURCE to DEST
  # -v     verbose
  install -Dv \
    rstudio_auth.sh \
    ${SINGULARITY_ROOTFS}/usr/lib/rstudio-server/bin/rstudio_auth

  install -Dv \
    launch_rserver.sh \
    ${SINGULARITY_ROOTFS}/usr/lib/rstudio-server/bin/launch_rserver

# https://docs.sylabs.io/guides/3.11/user-guide/definition_files.html#files
# The %files section allows you to copy files into the container with greater
# safety than using the %setup section. Its general form is:
# %files [from <stage>]
#     <source> [<destination>]
#     ...
%files
    r_packages.R

# %post is the section is where you can download files from the internet with
# tools like git and wget, install new software and libraries, write
# configuration files, create new directories, etc.
%post
    # Update the image
    apt update
    apt upgrade -y

    # for igraph
    apt install -y glpk-utils libglpk-dev

    # for sctransform
    apt install -y libicu-dev

    # Install all locales
    apt install -y locales-all

    # Install development packages
    apt install -y r-base-dev git libssl-dev libclang-dev libxml2-dev \
      libcurl4-openssl-dev libssl-dev libfftw3-dev libtiff-dev libgsl-dev\
      libfontconfig1-dev libharfbuzz-dev libfribidi-dev
    apt install -y libproj-dev # For proj4, for ggmsa
    apt install -y libboost-all-dev # For GenomicBreaks and other packages
    apt install -y libmagick++-dev # For cropping images in vignette built following BiocStyle
    apt install -y cmake
    apt install -y libv8-dev libudunits2-dev libgdal-dev # in case one wants to install concaveman for ggforce
    apt install -y libhdf5-dev # for BPCells

    # Install software needed for vignette building and package checks
    apt install -y pandoc qpdf texlive

    # Small utilities usefult for command line and troubleshooting
    apt install -y bash-completion file sudo wget htop strace
    # Needed for the ss command to find which port to open
    apt install -y iproute2

    # For troubleshooting by running xeyes
    apt install -y x11-apps

    # Packages wanted by RStudio
    apt install -y psmisc procps systemctl sudo lsb-release libgl1 libnss3 libasound2 libxdamage1

    # Packages wanted by RStudio Desktop
    apt install -y libatk1.0-0 libatk-bridge2.0-0 libgtk-3-0

    # Install vim and other things needed for a good experience in the terminal
    apt install -y vim

    # A cool ligature font
    apt install -y fonts-firacode
    mkdir -p /etc/rstudio/fonts/firacode
    cp -a /usr/share/fonts-firacode/woff2/FiraCode-Regular.woff2 /etc/rstudio/fonts/firacode

    # Install R and RStudio server
    export RSTUDIO_SERVER_URL=https://download2.rstudio.org/server/jammy/amd64/rstudio-server-2023.12.1-402-amd64.deb
    export R_VERSION=4.3.2

    # https://cran.r-project.org/bin/linux/debian/#secure-apt
    gpg --keyserver keyserver.ubuntu.com \
        --recv-key '95C0FAF38DB3CCAD0C080A7BDC78B2DDEABC47B7'

    gpg --armor --export '95C0FAF38DB3CCAD0C080A7BDC78B2DDEABC47B7' | \
    tee /etc/apt/trusted.gpg.d/cran_debian_key.asc

    printf 'deb http://cloud.r-project.org/bin/linux/debian bookworm-cran40/\n' >> /etc/apt/sources.list
    apt update
    apt install -y r-base

    wget ${RSTUDIO_SERVER_URL}
    apt --fix-broken -y install ./$(basename ${RSTUDIO_SERVER_URL})
    rm $(basename ${RSTUDIO_SERVER_URL})

    # Install R packages of general intetest
    R -e 'install.packages(c("BiocManager", "remotes"))'
    Rscript r_packages.R
    rm r_packages.R

    # Use home directory outside image to install more packages
    printf "R_LIBS_SITE=\"/usr/local/lib/R/site-library:/usr/lib/R/library\"\n" | tee -a /etc/R/Renviron.site >/dev/null
    printf "R_LIBS_USER=\"~/R/library/R_${R_VERSION}_for_RStudio_Singularity\"\n" | tee -a /etc/R/Renviron.site >/dev/null

    # Clean downoladed package cache.  Yes I know about /var/libs.
    apt clean
